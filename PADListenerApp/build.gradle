apply plugin: 'com.android.application'
apply plugin: 'maven'

dependencies {
	compile 'com.android.support:support-v4:23.1.0'
	compile 'com.android.support:cardview-v7:23.1.0'
	compile 'org.apache.commons:commons-lang3:3.3.2'
	compile 'commons-io:commons-io:2.4'
	compile 'com.jakewharton.timber:timber:2.5.0'
	compile 'com.jakewharton:butterknife:6.0.0'
	compile 'de.cketti.library.changelog:ckchangelog:1.2.0'
	compile 'com.github.gabrielemariotti.cards:library:1.9.1'
	compile 'com.squareup.picasso:picasso:2.3.4'
	//compile 'com.github.amlcurran.showcaseview:library:5.0.0'
	compile 'com.github.amlcurran.showcaseview:library:5.1.0-SNAPSHOT@aar'
    compile project(':SandroProxyLib')
    compile project(':SuperUserLib')
}

android {
	compileSdkVersion rootProject.ext.compileSdkVersion
	buildToolsVersion rootProject.ext.buildToolsVersion

	useLibrary 'org.apache.http.legacy'

	productFlavors {
		arm {
			ndk {
				abiFilter "armeabi"
			}
		}
	}

	lintOptions {
		abortOnError false
	}

	packagingOptions {
		exclude 'META-INF/DEPENDENCIES.txt'
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/NOTICE.txt'
		exclude 'META-INF/NOTICE'
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/notice.txt'
		exclude 'META-INF/license.txt'
		exclude 'META-INF/dependencies.txt'
		exclude 'META-INF/LGPL2.1'
	}


	String signingPropsFilePath = null
	if (project.hasProperty("signingProperties.path") && new File(project.property("signingProperties.path")).exists()) {
		signingPropsFilePath = project.property("signingProperties.path")
	} else if (System.getenv("SIGNING_PROPERTIES_PATH") != null && new File(System.getenv("SIGNING_PROPERTIES_PATH")).exists()) {
		signingPropsFilePath = System.getenv("SIGNING_PROPERTIES_PATH")
	}

	if (signingPropsFilePath != null) {
		Properties signingProps = new Properties()
		signingProps.load(new FileInputStream(file(signingPropsFilePath)))

		signingConfigs {
			release {
				storeFile file(signingProps['signing.release.storeFile'])
				storePassword signingProps['signing.release.storePassword']
				keyAlias signingProps['signing.release.keyAlias']
				keyPassword signingProps['signing.release.keyPassword']
			}
		}

		buildTypes {
			release {
				minifyEnabled false
				signingConfig signingConfigs.release
			}
		}
	}
}

artifacts {
	archives file('build/outputs/apk/PADListenerApp-arm-release.apk')
}

String uploadPropsFilePath = null
if (project.hasProperty("uploadProperties.path") && new File(project.property("uploadProperties.path")).exists()) {
	uploadPropsFilePath = project.property("uploadProperties.path")
} else if (System.getenv("UPLOAD_PROPERTIES_PATH") != null && new File(System.getenv("UPLOAD_PROPERTIES_PATH")).exists()) {
	uploadPropsFilePath = System.getenv("UPLOAD_PROPERTIES_PATH")
}

if (uploadPropsFilePath != null) {
	Properties uploadProps = new Properties()
	uploadProps.load(new FileInputStream(file(uploadPropsFilePath)))

	uploadArchives {
		repositories {
			mavenDeployer {
				repository(url: uploadProps['repo.release.url']) {
					authentication(userName: uploadProps['repo.release.userName'], password: uploadProps['repo.release.password']);
				}
				snapshotRepository(url: uploadProps['repo.snapshot.url']) {
					authentication(userName: uploadProps['repo.snapshot.userName'], password: uploadProps['repo.snapshot.password']);
				}
				pom.groupId = 'fr.neraud'
				pom.artifactId = 'PADListener'
				pom.version = manifestVersionName()
			}
		}
	}
}

def manifestVersionName() {
	def manifestFile = file(project.projectDir.absolutePath + '/src/main/AndroidManifest.xml')
	def ns = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", "android")
	def xml = new XmlParser().parse(manifestFile)
	return xml.attributes()[ns.versionName].toString()
}
